package index

import (
	"bytes"
	"github.com/yuin/goldmark"
)

type Message struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

templ ChatPane() {
	<div class="pt-4 pr-20 h-full flex flex-col w-full overflow-hidden">
		<div
			id="chat"
			class="bg-primary flex-grow space-y-4 overflow-y-auto text-white p-6"
			hx-post="/history"
			hx-trigger="load, reset-trigger from:body"
			hx-swap="innerHTML"
            hx-on="htmx:afterSwap:scrollChatToTop()"
			data-simplebar
			data-simplebar-auto-hide="false"
		></div>
		<div class="flex-none p-4 pt-0">
			<div class="flex items-end bg-secondary rounded-lg">
				<textarea
					id="prompt-input"
					name="message"
					placeholder="Type your message..."
					style="max-height: 50rem; border: none !important;"
					class="text-xl bg-secondary no-scroll flex-grow text-white rounded-xl px-2 py-2 resize-none outline-none rounded-r-none"
					rows="1"
				></textarea>
				<button
					id="send-button"
					hx-post="/message/user"
					hx-target="#chat-history"
					hx-swap="beforeend"
					hx-include="#prompt-input"
					hx-trigger="click, hx:afterRequest:send-prompt"
					class="py-2 px-2 text-white focus:outline-none"
				>
					<div
						class="rounded-xl bg-highlight p-1 text-primary hover:bg-primary hover:text-highlight duration-300 transition-all hover:transition-all"
					>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
							stroke-width="3"
							stroke="currentColor"
							class="size-6"
						>
							<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 10.5 12 3m0 0 7.5 7.5M12 3v18"></path>
						</svg>
					</div>
				</button>
			</div>
		</div>
	</div>
}

templ ChatHistory(messages []Message) {
	<div id="chat-history" class="flex flex-col overflow-hidden space-y-8">
		for _, message := range messages {
			@ChatMessage(message)
		}
	</div>
}

func IsUser(role string) bool {
	if role == "user" {
		return true
	}
	return false
}

func renderMarkdown(content string) (string, error) {
	var buf bytes.Buffer
	md := goldmark.New()
	if err := md.Convert([]byte(content), &buf); err != nil {
		return "", err
	}
	return buf.String(), nil
}

templ ChatMessage(message Message) {
	<div class={ "flex items-start" , "space-x-4" , templ.KV("flex-row-reverse", IsUser(message.Role)) }>
		<div class={ "rounded-xl text-textcolor" , templ.KV("p-3 bg-secondary", IsUser(message.Role)) }>
			<div class="text-lg">
				@templ.Raw(renderMarkdown(message.Content))
			</div>
		</div>
		<script>hljs.highlightAll();</script>
	</div>
}
