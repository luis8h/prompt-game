package components

import (
	"github.com/yuin/goldmark"
    "bytes"
)

type Message struct {
	Role    string  `json:"role"`
	Content string  `json:"content"`
}

templ ChatPane(messages []Message) {
	<div class="flex flex-col w-full h-full rounded-lg">
		@ChatHistory(messages)
		<div class="">
			<div class="flex items-center space-x-3">
				<textarea
					id="prompt-input"
					name="message"
					placeholder="Type your message..."
					class="flex-grow border border-gray-300 rounded-md px-4 py-2 resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
					rows="1"
				></textarea>
				<button
					id="send-button"
					hx-post="/message/user"
					hx-target="#chat"
					hx-swap="beforeend"
					hx-include="#prompt-input"
					hx-trigger="click, hx:afterRequest:send-prompt"
					class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none"
				>
					Send
				</button>
				<button
					type="button"
					hx-delete="/prompt/reset"
					hx-target="#chat"
					hx-swap="outerHTML"
					class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 focus:outline-none"
				>
					Reset
				</button>
			</div>
		</div>
		<script>
            document.body.addEventListener("htmx:afterRequest", function (evt) {
                if (evt.detail.pathInfo.requestPath === "/message/user") {
                    const promptInput = document.querySelector("#prompt-input");

                    const messageHistory = localStorage.getItem("message-history");
                    let messages = []
                    if (messageHistory !== null) {
                        messages = JSON.parse(messageHistory);
                    }

                    messages.push({role: "user", content: promptInput.value})
                    const newChatHistory = JSON.stringify(messages)
                    promptInput.value = "";

                    localStorage.setItem("message-history", newChatHistory)
                    const jsonBody = JSON.stringify({messages: messages});

                    fetch("/prompt", {
                        method: "POST",
                        body: jsonBody
                    })
                    .then(response => response.json())
                    .then(data => {
                        htmxBody = {message: data.answer}
                        htmx.ajax("POST", "/message/assistant", {values: htmxBody, swap: "beforeend", target: "#chat"})
                    })
                }
            });

            const textbox = document.querySelector("#prompt-input");
            const button = document.querySelector("#send-button");
            textbox.addEventListener("keydown", function (event) {
                if (event.keyCode == 13) {
                    button.click();
                }
            });
        </script>
	</div>
}

templ ChatHistory(messages []Message) {
	<div id="chat" class="flex-grow overflow-y-auto p-4 space-y-4">
		for _, message := range messages {
			@ChatMessage(message)
		}
	</div>
}

func IsUser(role string) bool {
	if role == "user" {
		return true
	}
	return false
}

func renderMarkdown(content string) (string, error) {
	var buf bytes.Buffer
	md := goldmark.New()
	if err := md.Convert([]byte(content), &buf); err != nil {
		return "", err
	}
	return buf.String(), nil
}

templ ChatMessage(message Message) {
	<div class={ "flex items-start" , "space-x-4" , templ.KV("flex-row-reverse", IsUser(message.Role)) }>
		<div class="p-3 rounded-lg bg-blue-100 text-blue-900" style="max-width: 80%">
            <div class="text-sm">
                @templ.Raw(renderMarkdown(message.Content))
            </div>
		</div>
        <script>hljs.highlightAll();</script>
	</div>
}
